// C++ Program to Check if Root to leaf path
// sum equal to a given number

#include <bits/stdc++.h>

using namespace std;

class Node {
public:
    Node *left, *right;
    int data;

    Node(int key) {
        data = key;
        left = nullptr;
        right = nullptr;
    }
};

// Given a tree and a sum, return true if there is a path from
// the root down to a leaf, such that adding up all the values
// along the path equals the given sum.
bool hasPathSum(Node* root, int sum) {
    if (root == NULL)
        return 0;

    int subSum = sum - root->data;

    // If we reach a leaf node and sum becomes 0 then return true
    if (subSum == 0 && root->left == nullptr && root->right == nullptr)
        return 1;

    // Otherwise check both subtrees
    bool left = 0, right = 0;
    
    if (root->left)
        left = hasPathSum(root->left, subSum);
    if (root->right)
        right = hasPathSum(root->right, subSum);

    return left || right;
}

int main() {
  
    int sum = 21;

    // Constructed binary tree is
    //         10
    //       /    \
    //      8      2
    //     / \    /
    //    3   5  2
  
    Node* root = new Node(10);
    root->left = new Node(8);
    root->right = new Node(2);
    root->left->left = new Node(3);
    root->left->right = new Node(5);
    root->right->left = new Node(2);
  
    if(hasPathSum(root, sum)) {
      cout << "True"<< endl;
    }
      else cout << "False";

    return 0;
}
