//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};

Node* buildTree(string str) {
    // Corner Case
    if (str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str;)
        ip.push_back(str);

    // Create the root of the tree
    Node* root = new Node(stoi(ip[0]));

    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();

        // Get the current node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current node
            currNode->left = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current node
            currNode->right = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}


// } Driver Code Ends

/*Complete the function below
Node is as follows:
struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/

class Solution {
  public:
    // Return True if the given trees are isomotphic. Else return False.
    
    bool helper(Node* root,map<pair<int,int>,bool> &vis){
        if(vis[{root->data,-1}]!=1) return 0;
        queue<Node*> q;
        q.push(root);
        
        while(!q.empty()){
            Node *temp=q.front();
            q.pop();
            if(temp->left){
                if(vis[{temp->left->data,temp->data}]!=1) return 0;
                else q.push(temp->left);
            }
            if(temp->right){
                if(vis[{temp->right->data,temp->data}]!=1) return 0;
                else q.push(temp->right);
            }
        }
        return 1;
    }
    
    bool isIsomorphic(Node *root1, Node *root2) {
       if(!root1&&!root2) return 1;
       if(!root1 || !root2) return 0;
       queue<Node*> q;
       map<pair<int,int>,bool> vis;
       q.push(root1);
      vis[{root1->data,-1}]=1;
      
      while(!q.empty()){
          Node *temp=q.front();
          q.pop();
         if(temp->left){
             vis[{temp->left->data,temp->data}]=1;
             q.push(temp->left);
         }
         if(temp->right){
             vis[{temp->right->data,temp->data}]=1;
             q.push(temp->right);
         }
      }
      
      return helper(root2,vis);
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    scanf("%d ", &t);
    while (t--) {
        string s1, s2;
        getline(cin, s1);
        getline(cin, s2);
        Node* root1 = buildTree(s1);
        Node* root2 = buildTree(s2);
        Solution obj;
        if (obj.isIsomorphic(root1, root2))
            cout << "true" << endl;
        else
            cout << "false" << endl;

        cout << "~"
             << "\n";
    }
    return 0;
}

// } Driver Code Ends
