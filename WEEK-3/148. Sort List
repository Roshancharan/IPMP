/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(!head || !(head->next)) return head;
        ListNode *slow=head,*fast=head->next;
        while(fast && fast->next){
            slow=slow->next;
            fast=fast->next->next;
        }
         ListNode* mid=slow->next;
         slow->next=NULL;
          ListNode* left=sortList(head);
          ListNode* right=sortList(mid);
          return merge(left,right);
    }

    ListNode* merge( ListNode* h1, ListNode* h2){
         ListNode* dummy=new  ListNode(0);
          ListNode* res=dummy;
          while(h1 && h2){
            if(h1->val >= h2->val){
                res->next=h2;
                res=h2;
                h2=h2->next;
            }else{
                res->next=h1;
                res=h1;
                h1=h1->next;
            }
          }
          while(h1){
             res->next=h1;
                res=h1;
                h1=h1->next;
          }
          while(h2){
             res->next=h2;
                res=h2;
                h2=h2->next;
          }
          res->next=NULL;
          return dummy->next;
    }
};
