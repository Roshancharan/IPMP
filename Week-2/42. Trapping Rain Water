class Solution {
public:

    vector<int> left_max(vector<int> arr){
        vector<int> left(arr.size(),0);
        left[0]=arr[0];
        for(int i=1;i<arr.size();i++){
            left[i]=max(left[i-1],arr[i]);
        }
        return left;
    }

    vector<int> right_max(vector<int> arr){
        vector<int> right(arr.size(),0);
        right[arr.size()-1]=arr[arr.size()-1];
        for(int i=arr.size()-2;i>=0;i--){
            right[i]=max(right[i+1],arr[i]);
        }
        return right;
    }

    int trap(vector<int>& height) {
        int n=height.size();
        if(n<=2) return 0;
        vector<int> left=left_max(height);
        vector<int> right=right_max(height);
        int water=0;
        for(int i=1;i<n-1;i++){
            int x=min(left[i],right[i])-height[i];
            if(x>0) water+=x;
        }
        return water;
    }
};
