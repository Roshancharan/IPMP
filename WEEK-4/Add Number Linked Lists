//{ Driver Code Starts
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
using namespace std;

/* Linked list Node */
struct Node {
    int data;
    struct Node* next;

    Node(int x) {
        data = x;
        next = NULL;
    }
};

Node* buildList() {
    vector<int> arr;
    string input;
    getline(cin, input);
    stringstream ss(input);
    int number;
    while (ss >> number) {
        arr.push_back(number);
    }
    if (arr.empty()) {
        return NULL;
    }
    int val = arr[0];
    int size = arr.size();

    Node* head = new Node(val);
    Node* tail = head;

    for (int i = 1; i < size; i++) {
        val = arr[i];
        tail->next = new Node(val);
        tail = tail->next;
    }

    return head;
}

void printList(Node* n) {
    while (n) {
        cout << n->data << " ";
        n = n->next;
    }
    cout << endl;
}


// } Driver Code Ends
/* node for linked list:

struct Node {
    int data;
    struct Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

*/

class Solution {
  public:
  Node *reverse(Node *n){
      Node *prev=NULL;
      while(n){
          Node *next=n->next;
          n->next=prev;
          prev=n;
          n=next;
      }
      return prev;
  }
  
    Node* addTwoLists(Node* num1, Node* num2) {
       Node* n1=reverse(num1);
       Node* n2=reverse(num2);
       Node* dummy=new Node(-1);
       Node *curr=dummy;
       int sum=0,carry=0;
       while(n1 || n2){
           if(n1) {sum+=n1->data;
               n1=n1->next;
           }
           if(n2) {sum+=n2->data;
               n2=n2->next;
           }
           sum+=carry;
           carry=sum/10;
           if(sum>9) sum-=10;
           Node *temp=new Node(sum);
           curr->next=temp;
           curr=temp;
          sum=0;
       }

       
       if(carry){
           Node *temp=new Node(carry);
           curr->next=temp;
           curr=temp;
       }
       
       dummy=reverse(dummy->next);
       while(dummy->data==0) dummy=dummy->next;
       return dummy;
       
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    cin.ignore(); // To ignore the newline character after the integer input

    while (t--) {
        Node* num1 = buildList();
        Node* num2 = buildList();
        Solution ob;
        Node* res = ob.addTwoLists(num1, num2);
        printList(res);
        cout << "~" << endl;
    }
    return 0;
}

// } Driver Code Ends
