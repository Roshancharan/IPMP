#include <vector>
#include <queue>

using namespace std;

class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n = grid.size();
        if (grid[0][0] == 1 || grid[n - 1][n - 1] == 1)
            return -1;

        vector<vector<int>> directions{{1, 1},  {0, 1},  {1, 0},  {-1, 1},
                                       {1, -1}, {0, -1}, {-1, 0}, {-1, -1}};
        
        queue<pair<int, int>> q;
        vector<vector<bool>> vis(n, vector<bool>(n, false));
        q.push({0, 0});
        vis[0][0] = true;
        
        int pathLength = 1;

        while (!q.empty()) {
            int size = q.size();  
            for (int a = 0; a < size; a++) {
                auto [i, j] = q.front();
                q.pop();

                if (i == n - 1 && j == n - 1)
                    return pathLength;

                for (auto& d : directions) {
                    int r = i + d[0], c = j + d[1];
                    
                    if (r >= 0 && r < n && c >= 0 && c < n &&
                        grid[r][c] == 0 && !vis[r][c]) {
                        q.push({r, c});
                        vis[r][c] = true;  
                    }
                }
            }
            pathLength++;
        }

        return -1; 
    }
};
