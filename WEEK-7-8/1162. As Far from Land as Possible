class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
        int n=grid.size(),m=grid[0].size();

        vector<vector<int>> dis(n,vector<int>(m,1e9));

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1) dis[i][j]=0;
            }
        }

        queue<pair<int,int>> q;

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1) q.push({i,j});
            }
        }

        while(!q.empty()){
            auto x=q.front();
            q.pop();
            int r,c;

            for(int i=-1;i<=1;i+=2){
                r=x.first+i,c=x.second;
                if((r>=0&&r<n)&&(c>=0&&c<m)&&dis[r][c]>dis[x.first][x.second]+1){
                    dis[r][c]=dis[x.first][x.second]+1;
                    q.push({r,c});
                }

                 r=x.first,c=x.second+i;
                if((r>=0&&r<n)&&(c>=0&&c<m)&&dis[r][c]>dis[x.first][x.second]+1){
                    dis[r][c]=dis[x.first][x.second]+1;
                    q.push({r,c});
                }
            }
        }

        int res=-1e9;

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                res=max(res,dis[i][j]);
            }
        }

        if(res==0||res==1e9) return -1;
        else return res;
    }
};
