//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    
    bool helper(vector<vector<int>>& adj,int start,int parent, vector<bool> &visited){
        visited[start]=1;
        for(int i=0;i<adj[start].size();i++){
            if(!visited[adj[start][i]]){
                if(helper(adj,adj[start][i],start,visited)) return 1;
            }
            else if(adj[start][i]!=parent) return 1;
        }
        return 0;
    }
    
    bool isCycle(vector<vector<int>>& adj) {
       int v=adj.size();
       vector<bool> visited(v,0);
       for(int i=0;i<v;i++){
           if(!visited[i]){
               if(helper(adj,i,-1,visited)) return 1;
           }
       }
       return 0;
    }
};


//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj(V);
        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        Solution obj;
        bool ans = obj.isCycle(adj);
        if (ans)
            cout << "1\n";
        else
            cout << "0\n";

        cout << "~"
             << "\n";
    }
    return 0;
}
// } Driver Code Ends
