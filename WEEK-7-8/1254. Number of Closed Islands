class Solution {

    void dfs(vector<vector<int>>& grid, int i, int j,
             vector<vector<bool>>& vis) {
        vis[i][j] = 1;
        int n = grid.size(), m = grid[0].size();

        for (int k = -1; k <= 1; k += 2) {
            int r, c;
            r = i + k, c = j;
            if ((r >= 0 && r < n) && (c >= 0 && c < m) && !vis[r][c] &&
                grid[r][c] == 0)
                dfs(grid, r, c, vis);
            r = i, c = j + k;
            if ((r >= 0 && r < n) && (c >= 0 && c < m) && !vis[r][c] &&
                grid[r][c] == 0)
                dfs(grid, r, c, vis);
        }
    }

public:
    int closedIsland(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();

        vector<vector<bool>> vis(n, vector<bool>(m, 0));

        for (int i = 0; i < n; i++) {
            if (!vis[i][0] && grid[i][0] == 0)
                dfs(grid, i, 0, vis);
            if (!vis[i][m - 1] && grid[i][m - 1] == 0)
                dfs(grid, i, m - 1, vis);
        }

        for (int i = 0; i < m; i++) {
            if (!vis[0][i] && grid[0][i] == 0)
                dfs(grid, 0, i, vis);
            if (!vis[n - 1][i] && grid[n - 1][i] == 0)
                dfs(grid, n - 1, i, vis);
        }

        int res = 0;

        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                if (!vis[i][j] && grid[i][j] == 0) {
                    dfs(grid, i, j, vis);
                    res++;
                }
            }
        }

        return res;
    }
};
